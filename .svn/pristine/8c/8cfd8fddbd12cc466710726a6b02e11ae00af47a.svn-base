package id.co.pegadaian.redis.config;

import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisPassword;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericToStringSerializer;

@Configuration
public class RedisConfig {

	private static final String KEY = "TblParam";
	Properties prop = new Properties();
	InputStream in = getClass().getResourceAsStream("/application.properties");

	@Bean
	public RedisTemplate<String, Object> redisTemplate() {
		try {
			prop.load(in);
		} catch (Exception e) {
			e.printStackTrace();
		}
		long expireTime = Long.valueOf(prop.getProperty("redis-expire"));

		final RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();
		template.setConnectionFactory(jedisConnectionFactory());
		template.setValueSerializer(new GenericToStringSerializer<Object>(Object.class));
		return template;
		
//	    RedisTemplate<String, Object> template = new RedisTemplate<>();
//	    template.setConnectionFactory(jedisConnectionFactory());
//	    return template;
	}
	
	@Bean
	public JedisConnectionFactory jedisConnectionFactory() {
		RedisStandaloneConfiguration redisStandaloneConfiguration = new RedisStandaloneConfiguration();
		try {
			prop.load(in);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String ipServer = prop.getProperty("ip-redis");
		int port = Integer.valueOf(prop.getProperty("port-redis").toString());
		String pass = prop.getProperty("pass-redis");
		
		redisStandaloneConfiguration.setHostName(ipServer);
		redisStandaloneConfiguration.setPort(port);
//		redisStandaloneConfiguration.setPassword(RedisPassword.of(pass));
	    return new JedisConnectionFactory(redisStandaloneConfiguration);
	}
}
